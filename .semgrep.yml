rules:
  # Rule 1: Finds hardcoded secrets by looking for a wider range of common variable names.
  - id: hardcoded-secrets-generic
    message: "A hardcoded secret or sensitive value was found. Secrets should be stored in environment variables or a secure vault."
    pattern: |
      ($X = "..." or $X = '...')
    languages:
      - python
      - javascript
    metavariable-pattern:
      metavariable: $X
      regex: (password|passwd|pwd|secret|key|token|creds|credential|api|username|user|email)
    severity: WARNING

  # Rule 2: Finds a broader range of command injection vulnerabilities, including code execution.
  # This rule now catches os.system, as well as dangerous subprocess functions.
  - id: python-command-injection
    message: "Using a function with `shell=True` and untrusted input can lead to a command injection or remote code execution vulnerability. Consider passing commands as a list of strings instead and avoiding functions like eval() or exec()."
    patterns:
      - pattern: os.system(...)
      - pattern: subprocess.$FN(..., shell=True)
      - pattern: os.popen(...)
      - pattern: eval(...)
      - pattern: exec(...)
    languages:
      - python
      - django
    severity: WARNING

  # Rule 3: Finds an inefficient nested loop.
  # This rule is already a good, general pattern because it finds any nested "for" loop.
  - id: inefficient-nested-loop-check
    message: "This nested loop has a performance issue. The time complexity is O(N^2), which can be slow on large datasets. Try to refactor the algorithm."
    pattern: |
      for $X in $L:
        ...
        for $Y in $L:
          ...
    languages:
      - python
      - javascript
    severity: WARNING
